// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: anime.sql

package database

import (
	"context"
)

const createAnime = `-- name: CreateAnime :one
INSERT INTO anime (id, title, startDate, updatedDate, completion)
VALUES (?, ?, ?, ?, ?)
RETURNING id, title, startdate, updateddate, completion
`

type CreateAnimeParams struct {
	ID          int64
	Title       string
	Startdate   string
	Updateddate string
	Completion  string
}

func (q *Queries) CreateAnime(ctx context.Context, arg CreateAnimeParams) (Anime, error) {
	row := q.db.QueryRowContext(ctx, createAnime,
		arg.ID,
		arg.Title,
		arg.Startdate,
		arg.Updateddate,
		arg.Completion,
	)
	var i Anime
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Startdate,
		&i.Updateddate,
		&i.Completion,
	)
	return i, err
}

const getAllAnime = `-- name: GetAllAnime :many
SELECT id, title, startdate, updateddate, completion FROM anime
`

func (q *Queries) GetAllAnime(ctx context.Context) ([]Anime, error) {
	rows, err := q.db.QueryContext(ctx, getAllAnime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Anime
	for rows.Next() {
		var i Anime
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Startdate,
			&i.Updateddate,
			&i.Completion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnime = `-- name: GetAnime :one
SELECT id, title, startdate, updateddate, completion FROM anime
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAnime(ctx context.Context, id int64) (Anime, error) {
	row := q.db.QueryRowContext(ctx, getAnime, id)
	var i Anime
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Startdate,
		&i.Updateddate,
		&i.Completion,
	)
	return i, err
}

const updateAnime = `-- name: UpdateAnime :exec
UPDATE anime SET startDate = ?, updatedDate = ?, completion = ? WHERE id = ?
`

type UpdateAnimeParams struct {
	Startdate   string
	Updateddate string
	Completion  string
	ID          int64
}

func (q *Queries) UpdateAnime(ctx context.Context, arg UpdateAnimeParams) error {
	_, err := q.db.ExecContext(ctx, updateAnime,
		arg.Startdate,
		arg.Updateddate,
		arg.Completion,
		arg.ID,
	)
	return err
}
